{"version":3,"file":"tag-input-dropdown.component.js","sourceRoot":"","sources":["../../../../modules/components/dropdown/tag-input-dropdown.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ViewChild,\n    forwardRef,\n    TemplateRef,\n    ContentChildren,\n    Input,\n    QueryList,\n    HostListener,\n    EventEmitter,\n    Type\n} from '@angular/core';\n\n// rx\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/first';\n\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { TagModel, TagInputDropdownOptions, OptionsProvider } from '../../core';\nimport { TagInputComponent } from '../../components/tag-input/tag-input';\n\nconst defaults: Type<TagInputDropdownOptions> = forwardRef(() => OptionsProvider.defaults.dropdown);\n\n@Component({\n    selector: 'tag-input-dropdown',\n    templateUrl: './tag-input-dropdown.template.html'\n})\nexport class TagInputDropdown {\n    /**\n     * @name dropdown\n     */\n    @ViewChild(Ng2Dropdown) public dropdown: Ng2Dropdown;\n\n    /**\n     * @name menuTemplate\n     * @desc reference to the template if provided by the user\n     * @type {TemplateRef}\n     */\n    @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name offset\n     * @type {string}\n     */\n    @Input() public offset: string = new defaults().offset;\n\n    /**\n     * @name focusFirstElement\n     * @type {boolean}\n     */\n    @Input() public focusFirstElement = new defaults().focusFirstElement;\n\n    /**\n     * - show autocomplete dropdown if the value of input is empty\n     * @name showDropdownIfEmpty\n     * @type {boolean}\n     */\n    @Input() public showDropdownIfEmpty = new defaults().showDropdownIfEmpty;\n\n    /**\n     * @description observable passed as input which populates the autocomplete items\n     * @name autocompleteObservable\n     */\n    @Input() public autocompleteObservable: (text: string) => Observable<any>;\n\n    /**\n     * - desc minimum text length in order to display the autocomplete dropdown\n     * @name minimumTextLength\n     */\n    @Input() public minimumTextLength = new defaults().minimumTextLength;\n\n    /**\n     * - number of items to display in the autocomplete dropdown\n     * @name limitItemsTo\n     */\n    @Input() public limitItemsTo: number = new defaults().limitItemsTo;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy = new defaults().displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy = new defaults().identifyBy;\n\n    /**\n     * @description a function a developer can use to implement custom matching for the autocomplete\n     * @name matchingFn\n     */\n    @Input() public matchingFn: (value: string, target: TagModel) => boolean = new defaults().matchingFn;\n\n    /**\n     * @name appendToBody\n     * @type {boolean}\n     */\n    @Input() public appendToBody = new defaults().appendToBody;\n\n    /**\n     * @name keepOpen\n     * @description option to leave dropdown open when adding a new item\n     * @type {boolean}\n     */\n    @Input() public keepOpen = new defaults().keepOpen;\n\n    /**\n     * list of items that match the current value of the input (for autocomplete)\n     * @name items\n     * @type {TagModel[]}\n     */\n    public items: TagModel[] = [];\n\n    /**\n     * @name _autocompleteItems\n     * @type {Array}\n     * @private\n     */\n    private _autocompleteItems: TagModel[] = [];\n\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n    public set autocompleteItems(items: TagModel[]) {\n        this._autocompleteItems = items;\n    }\n\n    /**\n     * @name autocompleteItems\n     * @desc array of items that will populate the autocomplete\n     * @type {Array<string>}\n     */\n    @Input() public get autocompleteItems(): TagModel[] {\n        const items = this._autocompleteItems;\n\n        if (!items) {\n            return [];\n        }\n\n        return items.map((item: TagModel) => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n    }\n\n    constructor(public tagInput: TagInputComponent) {}\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        this.onItemClicked().subscribe(this.requestAdding);\n\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide().subscribe(this.resetItems);\n\n        const DEBOUNCE_TIME = 200;\n\n        this.tagInput\n            .onTextChange\n            .debounceTime(DEBOUNCE_TIME)\n            .filter((value: string) => {\n                if (this.keepOpen === false) {\n                    return value.length > 0;\n                }\n\n                return true;\n            })\n            .subscribe(this.show);\n    }\n\n    /**\n     * @name updatePosition\n     */\n    public updatePosition(): void {\n        const position = this.tagInput.inputForm.getElementPosition();\n\n        this.dropdown.menu.updatePosition(position);\n    }\n\n    /**\n     * @name isVisible\n     * @returns {boolean}\n     */\n    public get isVisible(): boolean {\n        return this.dropdown.menu.state.menuState.isVisible;\n    }\n\n    /**\n     * @name onHide\n     * @returns {EventEmitter<Ng2Dropdown>}\n     */\n    public onHide(): EventEmitter<Ng2Dropdown> {\n        return this.dropdown.onHide;\n    }\n\n    /**\n     * @name onItemClicked\n     * @returns {EventEmitter<string>}\n     */\n    public onItemClicked(): EventEmitter<string> {\n        return this.dropdown.onItemClicked;\n    }\n\n    /**\n     * @name selectedItem\n     * @returns {Ng2MenuItem}\n     */\n    public get selectedItem(): Ng2MenuItem {\n        return this.dropdown.menu.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name state\n     * @returns {DropdownStateService}\n     */\n    public get state(): any {\n        return this.dropdown.menu.state;\n    }\n\n    /**\n     *\n     * @name show\n     */\n    public show = (): void => {\n        const value = this.getFormValue();\n\n        if (this.autocompleteObservable) {\n            return this.getItemsFromObservable(value);\n        }\n\n        if (!this.showDropdownIfEmpty && !value) {\n            return this.dropdown.hide();\n        }\n\n        const position = this.calculatePosition();\n        const items = this.getMatchingItems(value);\n        const hasItems = items.length > 0;\n        const isHidden = this.isVisible === false;\n        const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\n        const hasMinimumText = value.trim().length >= this.minimumTextLength;\n        const assertions = [];\n\n        const shouldShow = isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n        const shouldHide = this.isVisible && !hasItems;\n\n        this.setItems(items);\n\n        if (shouldShow) {\n            this.dropdown.show(position);\n        } else if (shouldHide) {\n            this.hide();\n        }\n    }\n\n    /**\n     * @name hide\n     */\n    public hide(): void {\n        this.resetItems();\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name scrollListener\n     */\n    @HostListener('window:scroll')\n    public scrollListener(): void {\n        if (!this.isVisible) {\n            return;\n        }\n\n        this.updatePosition();\n    }\n\n    /**\n     * @name onWindowBlur\n     */\n    @HostListener('window:blur')\n    public onWindowBlur(): void {\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name getFormValue\n     */\n    private getFormValue(): string {\n        return this.tagInput.formValue.trim();\n    }\n\n    /**\n     * @name calculatePosition\n     */\n    private calculatePosition(): ClientRect {\n        return this.tagInput.inputForm.getElementPosition();\n    }\n\n    /**\n     * @name requestAdding\n     * @param item {Ng2MenuItem}\n     */\n    private requestAdding = (item: Ng2MenuItem): void => {\n        this.tagInput.onAddingRequested(true, this.createTagModel(item));\n    }\n\n    /**\n     * @name createTagModel\n     * @param item\n     * @return {TagModel}\n     */\n    private createTagModel(item: Ng2MenuItem): TagModel {\n        const display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        const value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n\n        return {\n            ...item.value,\n            [this.tagInput.displayBy]: display,\n            [this.tagInput.identifyBy]: value\n        };\n    }\n\n    /**\n     *\n     * @param value {string}\n     * @returns {any}\n     */\n    private getMatchingItems(value: string): TagModel[] {\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n\n        const dupesAllowed = this.tagInput.allowDupes;\n\n        return this.autocompleteItems.filter((item: TagModel) => {\n            const hasValue: boolean = dupesAllowed ? true : this.tagInput.tags.some(tag => {\n                const identifyBy = this.tagInput.identifyBy;\n                const model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n                return model === item[this.identifyBy];\n            });\n\n            return this.matchingFn(value, item) && hasValue === false;\n        });\n    }\n\n    /**\n     * @name setItems\n     */\n    private setItems(items: TagModel[]): void {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    }\n\n    /**\n     * @name resetItems\n     */\n    private resetItems = (): void => {\n        this.items = [];\n    }\n\n    /**\n     * @name populateItems\n     * @param data\n     */\n    private populateItems(data: any): TagInputDropdown {\n        this.autocompleteItems = data.map(item => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n\n        return this;\n    }\n\n    /**\n     * @name getItemsFromObservable\n     * @param text\n     */\n    private getItemsFromObservable = (text: string): void => {\n        this.setLoadingState(true);\n\n        const subscribeFn = (data: any[]) => {\n            // hide loading animation\n            this.setLoadingState(false)\n                // add items\n                .populateItems(data);\n\n            this.setItems(this.getMatchingItems(text));\n\n            if (this.items.length) {\n                this.dropdown.show(this.calculatePosition());\n            } else if (!this.showDropdownIfEmpty && this.isVisible) {\n                this.dropdown.hide();\n            }\n        };\n\n        this.autocompleteObservable(text)\n            .first()\n            .subscribe(subscribeFn, () => this.setLoadingState(false));\n    }\n\n    /**\n     * @name setLoadingState\n     * @param state\n     * @return {TagInputDropdown}\n     */\n    private setLoadingState(state: boolean): TagInputDropdown {\n        this.tagInput.isLoading = state;\n\n        return this;\n    }\n}\n"]}